{"version":3,"sources":["App.js","Components/Messages/Messages.js","Assets/Send.svg","Redux/Actions.js","Components/Chat Area/Chat Area.js","Redux/Store.js","Redux/Reducer.js","index.js"],"names":["socket","Messages","messages","userNo","prevDate","className","map","id","message","user_no","time","date","style","display","alignItems","background","storeMessage","type","payload","ChatArea","useSelector","state","allMessages","dispatch","useDispatch","useState","setMessage","useEffect","enterClick","document","getElementById","addEventListener","e","keyCode","replace","length","focus","removeEventListener","value","placeholder","autoComplete","onChange","target","onClick","src","SendLogo","alt","App","newMessage","io","off","on","recievemsg","emit","allReducers","combineReducers","action","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render"],"mappings":"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","file":"static/js/main.cc1cc001.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport ChatArea from './Components/Chat Area/Chat Area';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { storeMessages } from './Redux/Actions';\r\nimport './App.css';\r\n\r\nimport io from 'socket.io-client';\r\nlet ENDPOINT = 'https://react-chat-app-assignment.herokuapp.com/';\r\nlet socket;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const { message, user_no } = useSelector(state => state.newMessage);\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n\r\n    return () => {\r\n      socket.off();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // console.log('msg');\r\n    socket.on('recieve-msg', recievemsg => {\r\n      // console.log(recievemsg);\r\n      dispatch(storeMessages(recievemsg));\r\n    });\r\n\r\n    if (!message.replace(/\\s/g, '').length <= 0) {\r\n      socket.emit('send-msg', message, user_no);\r\n    }\r\n    return () => {\r\n      socket.off();\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"app-title\">React Chat App</h2>\r\n      <div className=\"main-container\">\r\n        <ChatArea user_no={1} />\r\n        <ChatArea user_no={2} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport './Messages.css';\r\n\r\nconst Messages = ({ messages, userNo }) => {\r\n  let prevDate = '';\r\n\r\n  return (\r\n    <ScrollToBottom className=\"messages\">\r\n      <div className=\"padding\"></div>\r\n      {messages.map(({ message, user_no, time, date }, id) => {\r\n        return (\r\n          <div key={id}>\r\n            {date !== prevDate ? <p className=\"date\">{date}</p> : null}\r\n            <div style={{ display: 'none' }}>{date !== prevDate ? (prevDate = date) : null}</div>\r\n            \r\n            <div className=\"message\" style={{ alignItems: user_no === userNo ? 'flex-end' : 'flex-start' }}>\r\n              <div style={{ background: user_no === userNo ? '' : '#b228f9' }}>\r\n                {message}\r\n                <p className=\"time\">{time}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <div className=\"padding\"></div>\r\n    </ScrollToBottom>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","export default __webpack_public_path__ + \"static/media/Send.d059ed7e.svg\";","const storeMessage = (message, user_no) => {\r\n  return {\r\n    type: 'STORE MESSAGE',\r\n    payload: { message, user_no },\r\n  };\r\n};\r\nconst storeMessages = messages => {\r\n  return {\r\n    type: 'STORE MESSAGES',\r\n    payload: messages,\r\n  };\r\n};\r\n\r\nexport { storeMessage, storeMessages };\r\n","import React, { useEffect, useState } from 'react';\r\nimport Messages from '../Messages/Messages';\r\nimport SendLogo from '../../Assets/Send.svg';\r\nimport './Chat Area.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { storeMessage } from '../../Redux/Actions';\r\n\r\nconst ChatArea = ({ user_no }) => {\r\n  const messages = useSelector(state => state.allMessages);\r\n  const dispatch = useDispatch();\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleChange = e => {\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    if (!message.replace(/\\s/g, '').length <= 0) {\r\n      dispatch(storeMessage(message, user_no));\r\n      setMessage('');\r\n      document.getElementById(`msg${user_no}`).focus();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let enterClick;\r\n    document.getElementById(`msg${user_no}`).addEventListener(\r\n      'keyup',\r\n      (enterClick = e => {\r\n        // console.log(message);\r\n        if (e.keyCode === 13) {\r\n          if (!message.replace(/\\s/g, '').length <= 0) {\r\n            dispatch(storeMessage(message, user_no));\r\n            setMessage('');\r\n            document.getElementById(`msg${user_no}`).focus();\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    return () => {\r\n      document.getElementById(`msg${user_no}`).removeEventListener('keyup', enterClick);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"chatbox\">\r\n      <section>{`User ${user_no}`}</section>\r\n      <Messages messages={messages} userNo={user_no} />\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          placeholder=\"Type...\"\r\n          id={`msg${user_no}`}\r\n          autoComplete=\"off\"\r\n          onChange={handleChange}\r\n        />\r\n        <div onClick={handleSubmit} id=\"sendMsg\">\r\n          <img src={SendLogo} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatArea;\r\n","import { createStore, combineReducers } from 'redux';\r\nimport { newMessage, allMessages } from './Reducer';\r\n\r\nconst allReducers = combineReducers({\r\n  newMessage,\r\n  allMessages,\r\n});\r\n\r\nlet store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport { store };\r\n","const newMessage = (state = { message: '' }, action) => {\r\n  switch (action.type) {\r\n    case 'STORE MESSAGE':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst allMessages = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'STORE MESSAGES':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { newMessage, allMessages };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Redux/Store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}